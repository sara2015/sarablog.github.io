<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sara 小主</title>
    <description>一名美女前端的非物质文化遗产.</description>
    <link>http://sara.express/</link>
    <atom:link href="http://sara.express/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 03 May 2018 17:43:03 +0800</pubDate>
    <lastBuildDate>Thu, 03 May 2018 17:43:03 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>设计一个价格金额校验器</title>
        <description>&lt;p&gt;如何才能更好的实现一个价格金额校验器，需要满足的需求如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;正数，最多两位小数&lt;/li&gt;
  &lt;li&gt;数值有区间限制&lt;/li&gt;
  &lt;li&gt;错误要有错误提示&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;第一种方案函数式实现&quot;&gt;第一种方案：函数式实现&lt;/h5&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;myfunction&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;min, max, pointLength&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  var numberDom &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  window.document.getElementsByTagName&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;0];
  var a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; numberDom.value;
  var reg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;^[-+]?[1-9]&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0,8&lt;span class=&quot;o&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.\d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1,2&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;?&lt;span class=&quot;nv&quot;&gt;$)&lt;/span&gt;|&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;^[-+]?[0]&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.\d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1,2&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;?&lt;span class=&quot;nv&quot;&gt;$)&lt;/span&gt;/;
 // 判定是否是数字 
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a !&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;!reg.test&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
    	window.document.getElementsByTagName&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;0].innerHTML &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;请输入合法的数字：&quot;&lt;/span&gt; + min + &lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt; + max + &lt;span class=&quot;s2&quot;&gt;&quot;之间的数字，并且最多&quot;&lt;/span&gt; + pointLength + &lt;span class=&quot;s2&quot;&gt;&quot;位小数&quot;&lt;/span&gt;;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	window.document.getElementsByTagName&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;0].innerHTML &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;校验通过&quot;&lt;/span&gt;;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    window.document.getElementsByTagName&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;0].innerHTML &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;请输入数字&quot;&lt;/span&gt;;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;备注：这个方案的缺点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;代码庞大，if-else较多，如果再有限制条件，只能添加if else；&lt;/li&gt;
  &lt;li&gt;函数缺乏弹性，如果再有校验规则，则只能改函数，不符合开放-封闭原则&lt;/li&gt;
  &lt;li&gt;算法的复用性差，如果有别的地方使用，只能拷贝代码&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;第二种方案策略模式引入&quot;&gt;第二种方案：策略模式引入&lt;/h5&gt;
&lt;p&gt;基于上面的问题，我们能不能像写配置一样去写这个验证呢？实现的基本逻辑是这样的：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
// 获取校验元素
var numberDom &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  window.document.getElementsByTagName&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;0];

// 根据校验规则，生成校验器
var validator &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Validator&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
validator.add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;numberDom.value, &lt;span class=&quot;s1&quot;&gt;'isNotEmpty'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'请输入数字'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
validator.add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;numberDom.value, &lt;span class=&quot;s1&quot;&gt;'minLength: 1'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'用户输入不能少于1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;

// 开始校验，输入校验元素，输出错误信息
var errorObj &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; validator.start&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;

// 根据错误信息进行提示
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;errorObj.errorMsg&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    console.log&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;errorObj.errorMsg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    console.log&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'校验通过'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;什么是策略模式？
它的核心思想是将做什么和谁去做相分离，一个完整的策略模糊包括策略类，环境类，就像出去旅行，有多种交通工具，交通工具就相当于策略类，在本次实践中，给出的三个条件就是三个验证方法，多个验证方法组成了策略类，代码重构如下：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var strategies &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    isNubmer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value, errorMessage&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;value.isNaN ? errorMessage : void 0;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    minLength&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value, length, errorMessage&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;value.length &amp;lt; length ? errorMessage : void 0;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    maxLength&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value, length, errorMessage&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;value.length &amp;gt; length ? errorMessage : void 0;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    pointLength&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value, length, errorMessage&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;value.length &amp;gt; length ? errorMessage : void 0;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们完成了具体策略类的编写，接下来需要以可配置化的方式执行策略类，我们称它为角色类，角色类的作用是接收请求但是不处理请求，请求交给策略类力的具体方法处理，代码如下：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    class Validator &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        constructor&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
           this.cache &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;; // 代码内容
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dom, rules&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;var rule of rules&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                var strategyRule &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; rule.strategy.split&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
                var errorMsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; rule.errorMsg;
                this.cache.push&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    var strategy &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; strategyRule.shift&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
                    strategyRule.unshift&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dom.value&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
                    strategyRule.push&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;errorMsg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
                    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;strategies[strategy].apply&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dom, strategyAry&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
                &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        start&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;var validatorFunc of this.cache&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                var errorMsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; validatorFunc&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; // 开始校验
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;errorMsg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;errorMsg
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;目前为止，我们已经完成了当前的策略类书写，接下来我们直接在场景中实际使用，&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var numberDom &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  window.document.getElementsByTagName&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;0];
const validatorFunc &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    var validator &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new Validator&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
    validator.add&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;numberDom.value, &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;
        strategy: &lt;span class=&quot;s1&quot;&gt;'isNubmer'&lt;/span&gt;,
        errorMsg: &lt;span class=&quot;s1&quot;&gt;'请输入数字'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        strategy: &lt;span class=&quot;s1&quot;&gt;'minLength'&lt;/span&gt;,
        errorMsg: &lt;span class=&quot;s1&quot;&gt;'请输入大于*数字'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        strategy: &lt;span class=&quot;s1&quot;&gt;'maxLength'&lt;/span&gt;,
        errorMsg: &lt;span class=&quot;s1&quot;&gt;'请输入小于*数字'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        strategy: &lt;span class=&quot;s1&quot;&gt;'pointLength'&lt;/span&gt;,
        errorMsg: &lt;span class=&quot;s1&quot;&gt;'请输入数字'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}])&lt;/span&gt;;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
numberDom.addEventListener&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'blur'&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;errorMsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; validatorFunc&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;errorMsg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        console.log&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;errorMsg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;备注：策略模式优势是代码更加优雅，可复用，书写方便，但是也增加了代码量和复杂度，有一定的门槛，所以还可以利用ES6的proxy对象，在对象访问属性时就进行拦截&lt;/p&gt;

&lt;h5 id=&quot;第三种es6的proxy对象做属性拦截&quot;&gt;第三种：ES6的proxy对象做属性拦截&lt;/h5&gt;
&lt;p&gt;proxy相当于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种’元编程’，即对编程语言进行编程。理解成对目标对象的访问都要经过这一层拦截，重构后代码如下，具体的语法后面再解释：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;validator&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;target, validator, errorMsg&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;new Proxy&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;target, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        _validator: validator,
        &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;target, key, value, proxy&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;errMsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; errorMsg;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;target[key] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;va &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; this._validator[key];
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;!!va&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;Reflect.set&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;target, key, value, proxy&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;target[key] &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;备注：proxy接收两个参数，一个是目标对象，第二个是配置对象，对于每一个被代理的操作，需要提供一个对应的处理函数，该函数拦截对应的操作
注意：proxy起作用只有针对proxy实例，所以在实际运用中，重构代码如下：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const errorMsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;;
const vali &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; validator&lt;span class=&quot;o&quot;&gt;({}&lt;/span&gt;, validators, errorMsg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
var numberDom &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  window.document.getElementsByTagName&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)[&lt;/span&gt;0];
numberDom.addEventListener&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'onBlur'&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;validatorNext &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; funciton&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        yield vali.isNumber &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; numberDom.value;
        yield vali.minLength &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; numberDom.value;
        yield vali.maxLength &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; numberDom.value;
        yield vali.pointLength &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; numberDom.value;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;;
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;validator &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; validatorNext&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
    validator.next&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;;
    ...
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;总结：上述几种方案，各有各的优势劣势，前端代码最终的方向是优雅，扩展性好，可复用，本例中具体的实现还需进一步验证，接下来一节会专门抽个时间来proxy实现，有问题可及时私信知乎账号&lt;/p&gt;

</description>
        <pubDate>Wed, 02 May 2018 09:40:24 +0800</pubDate>
        <link>http://sara.express/2018/05/re/</link>
        <guid isPermaLink="true">http://sara.express/2018/05/re/</guid>
        
        
      </item>
    
      <item>
        <title>博客搭建资料</title>
        <description>&lt;p&gt;2018年4月20日，很想把自己的所思所想留下来，作为自己的非物质文化遗产留给后世，所以就给自己开通了博客，经过多方比较，
最后选择github+jekyll，经过一番周折，终于可以在本地开发、预览，期间用到的资料如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/88c9e72978b4&quot;&gt;使用博文&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/frontmatter/&quot;&gt;jekyll官网地址&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;备注：
博客的更新思路是以当天写代码过程中遇到的问题为主~~&lt;/p&gt;

</description>
        <pubDate>Tue, 24 Apr 2018 09:40:24 +0800</pubDate>
        <link>http://sara.express/2018/04/resume/</link>
        <guid isPermaLink="true">http://sara.express/2018/04/resume/</guid>
        
        
      </item>
    
  </channel>
</rss>
